= form_for expense, html: {id: 'expense-form' } do |form|
  .row
    .col-xs-12.col-md-3
      .form-group.selectize class=form_error?(expense, :expense_type)
        select.js-selectize name="expense[expense_type]" id="expense_expense_type" placeholder=I18n.t(:"helpers.prompt.expense.expense_type")
          option
          - Expense::VALID_TYPES.each do |type|
            option value=type selected=(true if type.to_s == expense.expense_type)
              = I18n.t(:"filter.expense_type.#{type}")
        = form_errors expense, :expense_type

    .col-xs-12.col-md-3
      .form-group.selectize class=form_error?(expense, :afa_type)
        select.js-selectize name="expense[afa_type]" id="expense_afa_type" placeholder=I18n.t(:"helpers.prompt.expense.afa_type")
          option
          - Expense::VALID_AFA_TYPES.each do |type|
            option value=type[:value] selected=(true if type[:value] == expense.afa_type)
              = type[:label]
        = form_errors expense, :afa_type
  .row
    .col-xs-12.col-md-4
      .form-group.selectize class=form_error?(expense, :interval)
        = form.select :interval, Expense.intervals.keys.map { |w| [Expense.human_enum_name(:interval, w), w] }, { include_blank: I18n.t(:"helpers.prompt.expense.interval") }, { class: 'js-selectize' }
        = form_errors expense, :interval
    .col-xs-12.col-md-4.js-toggle-interval-once class=(expense.once? ? "" : "hide")
      .form-group class=form_error?(expense, :date)
        .input-group.datepicker
          = form.label :date, class: "input-group-addon"
          = form.date_field :date, value: I18n.l(Time.zone.now, format: :datepicker), class: 'form-control', "data-value" => form.object.date
          span.input-group-btn
            button.btn.btn-default type="button"
              i.fa.fa-calendar
        = form_errors expense, :date, 'input-group-btn-feedback'
    .col-xs-12.col-md-4.js-toggle-interval-other class=(expense.once? ? "hide" : "")
      .form-group class=form_error?(expense, :started_at)
        .input-group.datepicker
          = form.label :started_at, class: "input-group-addon"
          = form.date_field :started_at, value: I18n.l(Time.zone.now, format: :datepicker), class: 'form-control', "data-value" => form.object.started_at
          span.input-group-btn
            button.btn.btn-default type="button"
              i.fa.fa-calendar
        = form_errors expense, :started_at, 'input-group-btn-feedback'
    .col-xs-12.col-md-4.js-toggle-interval-other class=(expense.once? ? "hide" : "")
      .form-group class=form_error?(expense, :ended_at)
        .input-group.datepicker
          = form.label :ended_at, class: "input-group-addon"
          = form.date_field :ended_at, value: I18n.l(Time.zone.now, format: :datepicker), class: 'form-control', "data-value" => form.object.ended_at
          span.input-group-btn
            button.btn.btn-default type="button"
              i.fa.fa-calendar
        = form_errors expense, :ended_at, 'input-group-btn-feedback'
  .row
    .col-xs-12.col-md-6
      .form-group class=form_error?(expense, :description)
        = form.label :description
        = form.text_field :description, class: 'form-control'
        = form_errors expense, :description

    .col-xs-12.col-md-6
      .form-group class=form_error?(expense, :seller)
        = form.label :seller
        = form.text_field :seller, class: 'form-control'
        = form_errors expense, :seller

  .row
    .col-xs-12.col-md-6
      .form-group class=form_error?(expense, :value)
        = form.label :value
        = form.number_field :value, class: 'form-control', step: "0.01"
        = form_errors expense, :value

    .col-xs-12.col-md-3
      .form-group
        = form.label :private_use_percent
        .input-group
          = form.number_field :private_use_percent, class: 'form-control text-right', max: 100, min: 0
          span.input-group-addon %

    .col-xs-12.col-md-3
      .form-group
        = form.label :vat_percent
        .input-group
          = form.number_field :vat_percent, class: 'form-control text-right', max: 100, min: 0
          span.input-group-addon %

  .row
    .col-xs-12.col-md-3
      .form-group class=form_error?(expense, :receipt)
        = form.label :receipt
        = form.attachment_field :receipt, class: 'form-control', direct: true, presigned: true
        = form_errors expense, :receipt
      - if expense.receipt.present?
        .form-group
          .checkbox.checkbox-right
            = form.check_box :remove_receipt
            label for="expense_remove_receipt"
              = I18n.t(:"helpers.label.expense.remove_receipt")
    .col-xs-12.col-md-3
      - if expense.receipt.present?
        a href=attachment_url(expense, :receipt) target="_blank"
          - if expense.receipt_content_type == "application/pdf"
            .pdf-viewer data-pdf-path=attachment_url(expense, :receipt)
      - else
        p.placeholder
          = I18n.t("helpers.label.expense.receipt_missing")
  = render "shared/forms/submit", path: expenses_path(stored_params(:index))
